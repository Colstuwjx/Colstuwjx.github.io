<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>devops on Colstuwjx's site</title><link>https://colstuwjx.github.io/tags/devops/</link><description>Recent content in devops on Colstuwjx's site</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 20 Jan 2018 20:00:00 +0800</lastBuildDate><atom:link href="https://colstuwjx.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>kube-dns实现原理的解读</title><link>https://colstuwjx.github.io/2018/01/kube-dns%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E7%9A%84%E8%A7%A3%E8%AF%BB/</link><pubDate>Sat, 20 Jan 2018 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2018/01/kube-dns%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E7%9A%84%E8%A7%A3%E8%AF%BB/</guid><description>&lt;p>最近一直在做类似skydns的dns服务发现相关的研究和代码实现，也就有了兴趣想解读下kube-dns的实现过程，学习和参考下社区的做法。&lt;/p></description></item><item><title>使用locust + boomer实现对非web组件的压测</title><link>https://colstuwjx.github.io/2018/01/%E4%BD%BF%E7%94%A8locust--boomer%E5%AE%9E%E7%8E%B0%E5%AF%B9%E9%9D%9Eweb%E7%BB%84%E4%BB%B6%E7%9A%84%E5%8E%8B%E6%B5%8B/</link><pubDate>Sat, 20 Jan 2018 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2018/01/%E4%BD%BF%E7%94%A8locust--boomer%E5%AE%9E%E7%8E%B0%E5%AF%B9%E9%9D%9Eweb%E7%BB%84%E4%BB%B6%E7%9A%84%E5%8E%8B%E6%B5%8B/</guid><description>&lt;p>最近有在编写类似SkyDNS的面向服务间调用的智能DNS服务，开发完成后如何对DNS服务本身进行压测有点被难倒了。市面上对HTTP类请求的压测测试很多，然而对非Web组件的压测工具则非常少见&amp;hellip;&lt;/p></description></item><item><title>[ 三年后的杂谈 ] 测试之Mock</title><link>https://colstuwjx.github.io/2017/10/%E4%B8%89%E5%B9%B4%E5%90%8E%E7%9A%84%E6%9D%82%E8%B0%88-%E6%B5%8B%E8%AF%95%E4%B9%8Bmock/</link><pubDate>Sat, 14 Oct 2017 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2017/10/%E4%B8%89%E5%B9%B4%E5%90%8E%E7%9A%84%E6%9D%82%E8%B0%88-%E6%B5%8B%E8%AF%95%E4%B9%8Bmock/</guid><description>&lt;p>笔者最近开始补全测试方面的一些基础知识，由于也算是个人职业技能建设的一部分，权且也算作&amp;rdquo;三年小结&amp;rdquo;系列的一篇罢。&lt;/p></description></item><item><title>[ 杂谈 ] 三年后</title><link>https://colstuwjx.github.io/2017/08/%E6%9D%82%E8%B0%88-%E4%B8%89%E5%B9%B4%E5%90%8E/</link><pubDate>Wed, 23 Aug 2017 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2017/08/%E6%9D%82%E8%B0%88-%E4%B8%89%E5%B9%B4%E5%90%8E/</guid><description>&lt;p>三年前，鄙人刚毕业之际写了一个对自己职业发展规划的&lt;a href="http://devopstarter.info/chu-niao-de-fei-xing-ji-hua/">帖子&lt;/a>，如今已经整整三年了，三年真的可以改变很多人，改变很多事情，且来回顾下鄙人这三年的经历、成长以及不足罢。&lt;/p></description></item><item><title>[ 三年后的杂谈 ] 浅谈配置管理 [ 篇一 ]</title><link>https://colstuwjx.github.io/2017/08/%E4%B8%89%E5%B9%B4%E5%90%8E%E7%9A%84%E6%9D%82%E8%B0%88-%E6%B5%85%E8%B0%88%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86-%E7%AF%87%E4%B8%80/</link><pubDate>Sun, 06 Aug 2017 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2017/08/%E4%B8%89%E5%B9%B4%E5%90%8E%E7%9A%84%E6%9D%82%E8%B0%88-%E6%B5%85%E8%B0%88%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86-%E7%AF%87%E4%B8%80/</guid><description>&lt;p>鄙人从2014年正式转正，参加工作以来已有三年，可以说，这三年，是鄙人在计算机行业最开始的入门阶段的三年，鄙人也由此萌生了总结这三年经验收获的想法，权且产出一些文章，内容上如有不准确之处，欢迎批评指正，邮箱：wjx_colstu@hotmail.com&lt;/p></description></item><item><title>[ 原创 ] Python开发进阶之浅析Tars</title><link>https://colstuwjx.github.io/2016/05/%E5%8E%9F%E5%88%9B-python%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%B5%85%E6%9E%90tars/</link><pubDate>Mon, 30 May 2016 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2016/05/%E5%8E%9F%E5%88%9B-python%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6%E4%B9%8B%E6%B5%85%E6%9E%90tars/</guid><description>&lt;p>已经转岗Python开发有一段时间了，对于现在团队的核心产品发布系统Tars的源码也读了一点，始终没有做出很好的总结，想来如今是时候了。这个系列将会介绍几个核心的亮点feature，并由此讲讲关于Python开发的一些个人观点。当然，代码都不是我写的，纯粹是学习&lt;code>大牛之作的笔记总结&lt;/code>罢了。
在这第一篇里，鄙人将介绍一下关于Tars发布系统的一些设计和抽象。&lt;/p></description></item><item><title>[ 原创 ] Ansible Playbook 执行原理源码解读（一）（粗略）</title><link>https://colstuwjx.github.io/2016/05/%E5%8E%9F%E5%88%9B-ansible-playbook-%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B8%80%E7%B2%97%E7%95%A5/</link><pubDate>Mon, 16 May 2016 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2016/05/%E5%8E%9F%E5%88%9B-ansible-playbook-%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E4%B8%80%E7%B2%97%E7%95%A5/</guid><description>&lt;p>这篇文章主要是分享一下鄙人对 ansible playbook 的执行流程的一些理解。&lt;/p></description></item><item><title>[ 原创 ] Saltstack 高可用架构漫谈</title><link>https://colstuwjx.github.io/2015/11/%E5%8E%9F%E5%88%9B-saltstack-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%BC%AB%E8%B0%88/</link><pubDate>Fri, 13 Nov 2015 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2015/11/%E5%8E%9F%E5%88%9B-saltstack-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84%E6%BC%AB%E8%B0%88/</guid><description>&lt;p>这篇文章记录了鄙人折腾Salt项目的背景和一些成果及经验教训。&lt;/p></description></item><item><title>运维开发探索之&lt; Gaea.03 前端 ></title><link>https://colstuwjx.github.io/2015/04/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%8E%A2%E7%B4%A2%E4%B9%8B-gaea.03-%E5%89%8D%E7%AB%AF/</link><pubDate>Sun, 19 Apr 2015 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2015/04/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%8E%A2%E7%B4%A2%E4%B9%8B-gaea.03-%E5%89%8D%E7%AB%AF/</guid><description>&lt;p>这篇文章是运维开发探索系列之Gaea篇的第三篇。&lt;/p></description></item><item><title>运维开发探索之&lt; Gaea.02 原型设计 ></title><link>https://colstuwjx.github.io/2015/04/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%8E%A2%E7%B4%A2%E4%B9%8B-gaea.02-%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/</link><pubDate>Sat, 18 Apr 2015 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2015/04/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%8E%A2%E7%B4%A2%E4%B9%8B-gaea.02-%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1/</guid><description>&lt;p>这篇文章是运维开发探索系列之Gaea篇的第二篇。&lt;/p></description></item><item><title>运维开发探索之&lt; Gaea.01 初探></title><link>https://colstuwjx.github.io/2015/02/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%8E%A2%E7%B4%A2%E4%B9%8B-gaea.01-%E5%88%9D%E6%8E%A2/</link><pubDate>Sun, 01 Feb 2015 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2015/02/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%8E%A2%E7%B4%A2%E4%B9%8B-gaea.01-%E5%88%9D%E6%8E%A2/</guid><description>&lt;p>这篇文章是运维开发探索系列之Gaea篇的第一篇。&lt;/p></description></item><item><title>运维开发探索之&lt; 开篇 ></title><link>https://colstuwjx.github.io/2015/02/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%8E%A2%E7%B4%A2%E4%B9%8B-%E5%BC%80%E7%AF%87/</link><pubDate>Sun, 01 Feb 2015 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2015/02/%E8%BF%90%E7%BB%B4%E5%BC%80%E5%8F%91%E6%8E%A2%E7%B4%A2%E4%B9%8B-%E5%BC%80%E7%AF%87/</guid><description>&lt;p>这是一个运维自动化工具构思的系列。&lt;/p></description></item><item><title>对Devops的思考和构想——建立机器世界的生态系统 (结局篇)</title><link>https://colstuwjx.github.io/2015/01/%E5%AF%B9devops%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%9E%84%E6%83%B3%E5%BB%BA%E7%AB%8B%E6%9C%BA%E5%99%A8%E4%B8%96%E7%95%8C%E7%9A%84%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F-%E7%BB%93%E5%B1%80%E7%AF%87/</link><pubDate>Fri, 02 Jan 2015 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2015/01/%E5%AF%B9devops%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%9E%84%E6%83%B3%E5%BB%BA%E7%AB%8B%E6%9C%BA%E5%99%A8%E4%B8%96%E7%95%8C%E7%9A%84%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F-%E7%BB%93%E5%B1%80%E7%AF%87/</guid><description>&lt;p>这是关于机器和运维乃至社会之间的思考系列的第二篇。&lt;/p></description></item><item><title>对Devops的思考和构想——建立机器世界的生态系统 (篇一)</title><link>https://colstuwjx.github.io/2014/11/%E5%AF%B9devops%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%9E%84%E6%83%B3%E5%BB%BA%E7%AB%8B%E6%9C%BA%E5%99%A8%E4%B8%96%E7%95%8C%E7%9A%84%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F-%E7%AF%87%E4%B8%80/</link><pubDate>Wed, 26 Nov 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/11/%E5%AF%B9devops%E7%9A%84%E6%80%9D%E8%80%83%E5%92%8C%E6%9E%84%E6%83%B3%E5%BB%BA%E7%AB%8B%E6%9C%BA%E5%99%A8%E4%B8%96%E7%95%8C%E7%9A%84%E7%94%9F%E6%80%81%E7%B3%BB%E7%BB%9F-%E7%AF%87%E4%B8%80/</guid><description>&lt;p>最近一直看一些思想和概念性质的文章，略有感想，不敢私藏，愿分享之。&lt;/p></description></item><item><title>[ 翻译 ] 开源世界的"服务发现"</title><link>https://colstuwjx.github.io/2014/08/%E7%BF%BB%E8%AF%91-%E5%BC%80%E6%BA%90%E4%B8%96%E7%95%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</link><pubDate>Sat, 30 Aug 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/08/%E7%BF%BB%E8%AF%91-%E5%BC%80%E6%BA%90%E4%B8%96%E7%95%8C%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0/</guid><description>&lt;p>这里是对服务发现的一篇翻译，原文见：&lt;a href="http://jasonwilder.com/blog/2014/02/04/service-discovery-in-the-cloud/">Open-Source Service Discovery&lt;/a>&lt;/p></description></item><item><title>结合Salt-output实现Job前端下发的友好展现</title><link>https://colstuwjx.github.io/2014/08/%E7%BB%93%E5%90%88salt-output%E5%AE%9E%E7%8E%B0job%E5%89%8D%E7%AB%AF%E4%B8%8B%E5%8F%91%E7%9A%84%E5%8F%8B%E5%A5%BD%E5%B1%95%E7%8E%B0/</link><pubDate>Fri, 29 Aug 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/08/%E7%BB%93%E5%90%88salt-output%E5%AE%9E%E7%8E%B0job%E5%89%8D%E7%AB%AF%E4%B8%8B%E5%8F%91%E7%9A%84%E5%8F%8B%E5%A5%BD%E5%B1%95%E7%8E%B0/</guid><description>&lt;p>最近一段时间一直在做类似salt-halite的Salt作业发布Web工具，其中很重要的一点就是如何友好的展现输出，一直也是很想直接调用Salt原生的salt-output系统，没能做成。在通过Github上给官方提Issue，以及群里运维大神苦咖啡的热心帮助下，终有所得，不敢有所藏，愿分享之。&lt;/p></description></item><item><title>源码解读Saltstack运行机制之Job Runtime</title><link>https://colstuwjx.github.io/2014/07/%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBsaltstack%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E4%B9%8Bjob-runtime/</link><pubDate>Wed, 30 Jul 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/07/%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BBsaltstack%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E4%B9%8Bjob-runtime/</guid><description>&lt;p>鄙人深切以为 “在开源的世界里阅读源码才是深层次理解软件运行机制的不二法门”，本系列即是旨在通过解读（当然，鄙人实力有限，只是粗浅的解读）Saltstack源码的方式，了解Saltstack内部的运行机制，对排障和更好理解和二次开发Saltstack有一定助力。&lt;/p></description></item><item><title>Python开发之几个内联函数的介绍</title><link>https://colstuwjx.github.io/2014/07/python%E5%BC%80%E5%8F%91%E4%B9%8B%E5%87%A0%E4%B8%AA%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E7%9A%84%E4%BB%8B%E7%BB%8D/</link><pubDate>Mon, 28 Jul 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/07/python%E5%BC%80%E5%8F%91%E4%B9%8B%E5%87%A0%E4%B8%AA%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0%E7%9A%84%E4%BB%8B%E7%BB%8D/</guid><description>&lt;p>Python本身有很多内置的函数供开发人员使用，其中有几个感觉挺有学习价值，在这里记录一下。&lt;/p></description></item><item><title>Salt 自动化系统碎碎念</title><link>https://colstuwjx.github.io/2014/07/salt-%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E7%BB%9F%E7%A2%8E%E7%A2%8E%E5%BF%B5/</link><pubDate>Mon, 28 Jul 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/07/salt-%E8%87%AA%E5%8A%A8%E5%8C%96%E7%B3%BB%E7%BB%9F%E7%A2%8E%E7%A2%8E%E5%BF%B5/</guid><description>&lt;p>使用Saltstack也有段时间，期间踩了不少坑，有的解决了，有的解决不了便避开了。本文便是一些排障经验的归纳和使用体验的总结，纯属个人经验，不喜勿喷。&lt;/p></description></item><item><title>欢迎加入Linux技术交流群</title><link>https://colstuwjx.github.io/2014/07/%E6%AC%A2%E8%BF%8E%E5%8A%A0%E5%85%A5linux%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81%E7%BE%A4/</link><pubDate>Sun, 27 Jul 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/07/%E6%AC%A2%E8%BF%8E%E5%8A%A0%E5%85%A5linux%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81%E7%BE%A4/</guid><description>&lt;p>群号 250244637， 关注Devops、Linux开源技术、运维自动化、Saltstack、Python开发等IT技术。&lt;/p></description></item><item><title>Saltstack 新特性测试之proxy minion</title><link>https://colstuwjx.github.io/2014/07/saltstack-%E6%96%B0%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95%E4%B9%8Bproxy-minion/</link><pubDate>Sat, 19 Jul 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/07/saltstack-%E6%96%B0%E7%89%B9%E6%80%A7%E6%B5%8B%E8%AF%95%E4%B9%8Bproxy-minion/</guid><description>&lt;p>salt 目前主要的应用场景是Linux OS下，另外还有Windows Client（Win下没用过，但是看官方issue，应该……），最近关注到官方的一个小模块提到了Proxy minion，群里也多有提及，便想着看看到底是啥存在。&lt;/p></description></item><item><title>[ 翻译 ] salt 新通信架构——salt raet（Github篇）</title><link>https://colstuwjx.github.io/2014/07/%E7%BF%BB%E8%AF%91-salt-%E6%96%B0%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84salt-raetgithub%E7%AF%87/</link><pubDate>Sun, 06 Jul 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/07/%E7%BF%BB%E8%AF%91-salt-%E6%96%B0%E9%80%9A%E4%BF%A1%E6%9E%B6%E6%9E%84salt-raetgithub%E7%AF%87/</guid><description>&lt;p>Saltstack官方在salt 2014 介绍视频中引入了salt raet概念，salt raet是继Salt-Zeromq, Salt-Ssh之后的第三套通信体系，全名为Reliable Asynchronous Event Transport,即基于事件的可靠异步传输协议 —— by 译者&lt;/p></description></item><item><title>Saltstack 学习之Salt Formulas</title><link>https://colstuwjx.github.io/2014/06/saltstack-%E5%AD%A6%E4%B9%A0%E4%B9%8Bsalt-formulas/</link><pubDate>Sat, 14 Jun 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/06/saltstack-%E5%AD%A6%E4%B9%A0%E4%B9%8Bsalt-formulas/</guid><description>&lt;p>Saltstack自0.17.x版本开始引进Formulas的概念，旨在通过简化State和集成数据来实现State的友好管理，本文将就此展开探讨。更多的样例可以参见：&lt;a href="https://github.com/saltstack-formulas"> Formulas.Git&lt;/a>&lt;/p></description></item><item><title>Saltstack 应用技巧之Pillar的灵活管理</title><link>https://colstuwjx.github.io/2014/06/saltstack-%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B9%8Bpillar%E7%9A%84%E7%81%B5%E6%B4%BB%E7%AE%A1%E7%90%86/</link><pubDate>Sat, 14 Jun 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/06/saltstack-%E5%BA%94%E7%94%A8%E6%8A%80%E5%B7%A7%E4%B9%8Bpillar%E7%9A%84%E7%81%B5%E6%B4%BB%E7%AE%A1%E7%90%86/</guid><description>&lt;p>Saltstack使用Pillar和Grains数据来管理和分类Minion，其中Grains数据作为Minion的“固有属性”存储在Minion端，而Pillar则作为“变量数据”存储在Salt-Master端，本文就如何灵活的应用和管理Pillar来实现分类与配置部署的话题予以探讨。&lt;/p></description></item><item><title>Saltstack 学习之Scheduler</title><link>https://colstuwjx.github.io/2014/06/saltstack-%E5%AD%A6%E4%B9%A0%E4%B9%8Bscheduler/</link><pubDate>Thu, 12 Jun 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/06/saltstack-%E5%AD%A6%E4%B9%A0%E4%B9%8Bscheduler/</guid><description>&lt;p>Saltstack原生提供schedule模块来完成计划任务的功能，基于State完成额定的定时执行的任务，本文将就此展开讲述。&lt;/p></description></item><item><title>建立Saltstack运转机制之个人做法（一）</title><link>https://colstuwjx.github.io/2014/06/%E5%BB%BA%E7%AB%8Bsaltstack%E8%BF%90%E8%BD%AC%E6%9C%BA%E5%88%B6%E4%B9%8B%E4%B8%AA%E4%BA%BA%E5%81%9A%E6%B3%95%E4%B8%80/</link><pubDate>Wed, 11 Jun 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/06/%E5%BB%BA%E7%AB%8Bsaltstack%E8%BF%90%E8%BD%AC%E6%9C%BA%E5%88%B6%E4%B9%8B%E4%B8%AA%E4%BA%BA%E5%81%9A%E6%B3%95%E4%B8%80/</guid><description>&lt;p>一个企业的IT系统的运转机制是非常复杂的，如何结合Saltstack加入自动化运维的基因，不同的运维工程师都有各自独到的见解和做法，本文就此介绍下鄙人参考大神们做法得出的一些拙见。&lt;/p></description></item><item><title>Python 开发之print结果写入文件</title><link>https://colstuwjx.github.io/2014/05/python-%E5%BC%80%E5%8F%91%E4%B9%8Bprint%E7%BB%93%E6%9E%9C%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</link><pubDate>Tue, 27 May 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/05/python-%E5%BC%80%E5%8F%91%E4%B9%8Bprint%E7%BB%93%E6%9E%9C%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6/</guid><description>&lt;p>编写程序时，调试是一个很重要的步骤，为此，各种开发语言也建立了自身完善的Debug方法。最常见和普适的方法便是通过Echo或Print将需要了解的变量或返回值输出到Console，以判断当前程序的执行情况。&lt;/p></description></item><item><title>Saltstack 实战之event + returner的灵活使用</title><link>https://colstuwjx.github.io/2014/05/saltstack-%E5%AE%9E%E6%88%98%E4%B9%8Bevent--returner%E7%9A%84%E7%81%B5%E6%B4%BB%E4%BD%BF%E7%94%A8/</link><pubDate>Thu, 15 May 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/05/saltstack-%E5%AE%9E%E6%88%98%E4%B9%8Bevent--returner%E7%9A%84%E7%81%B5%E6%B4%BB%E4%BD%BF%E7%94%A8/</guid><description>&lt;p>最近看到绿肥大神的那篇salt event系统的介绍，觉得可以通过这种方式灵活的建立起一个反馈机制，主要用到的是绿肥大神使用的event监听以及returner本地返回。&lt;/p></description></item><item><title>Saltstack 学习之target minions（一）</title><link>https://colstuwjx.github.io/2014/05/saltstack-%E5%AD%A6%E4%B9%A0%E4%B9%8Btarget-minions%E4%B8%80/</link><pubDate>Wed, 14 May 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/05/saltstack-%E5%AD%A6%E4%B9%A0%E4%B9%8Btarget-minions%E4%B8%80/</guid><description>&lt;p>本文总结saltstack如何定位目标主机，以及介绍一些常见使用样例。&lt;/p></description></item><item><title>Saltstack 学习之target minions（二）</title><link>https://colstuwjx.github.io/2014/05/saltstack-%E5%AD%A6%E4%B9%A0%E4%B9%8Btarget-minions%E4%BA%8C/</link><pubDate>Wed, 14 May 2014 20:00:00 +0800</pubDate><guid>https://colstuwjx.github.io/2014/05/saltstack-%E5%AD%A6%E4%B9%A0%E4%B9%8Btarget-minions%E4%BA%8C/</guid><description>&lt;p>本文紧接上一篇，就target的各分类方式的详细用法予以讲解。&lt;/p></description></item></channel></rss>